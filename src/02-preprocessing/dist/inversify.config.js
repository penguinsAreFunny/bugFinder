"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.container = void 0;
var bugfinder_commitpath_db_mongodb_1 = require("bugfinder-commitpath-db-mongodb");
var bugfinder_framework_1 = require("bugfinder-framework");
var bugFinder_framework_defaultContainer_1 = require("bugFinder-framework-defaultContainer");
var bugfinder_commitpath_number_sonarqube_preprocessor_featureselection_1 = require("bugfinder-commitpath-number-sonarqube-preprocessor-featureselection");
var container = bugFinder_framework_defaultContainer_1.preprocessingContainer;
exports.container = container;
var mongoDBConfig = {
    url: "mongodb://localhost:27017",
    dbName: "EXPERIMENTAL"
};
var logOptions = {
    debugToConsole: true,
    errorToConsole: true,
    infoToConsole: true,
    traceToConsole: true,
    warnToConsole: true,
    logFile: "./log.txt",
};
var ignorePaths = [/src$/];
var trace = {
    annotatorName: "bugfinder-commitpath-annotator-commitmsgwindow",
    annotatorVersion: "1.0.1",
    locPreprocessName: "bugfinder-commitpath-localitypreprocessor-commitsubset",
    locPreprocessVersion: "1.12.0",
    locRecordName: "bugfinder-localityrecorder-commitpath",
    locRecordVersion: "1.23.4",
    preprocessorName: "bugfinder-commitpath-number-sonarqubepredecessormeasurement-preprocessor-selectiontransformer",
    preprocessorVersion: "1.0.1",
    quantifierName: "bugfinder-commitpath-quantifier-sonarqubepredecessors",
    quantifierVersion: "1.1.8"
};
var description = "This dataset contains samples of code metrics of files and a target that indicated the number " +
    "of fixes that occured to that file. SonarQube was used to " +
    " measure atomic measurements. After that measurements of 3 predecessor CommitPaths were taken into account to" +
    " calculate SonarQubePredecessorMeasurements. Predecessors CommitPaths are the last changes of file in " +
    "predecessors commits. The annotations are the number of fix indicating commit messages in the 3 next " +
    "CommitPaths (next changes to that file). A fix indicating commit msg is a msg that contains words like bug, fix," +
    " error or fail, affects less or equal than 2 files is not a merge commit and if the CommitPath is not a test file.";
var ignoreFeatures = [
    'minValClasses',
    'minValFunctions',
    'minValCoverage',
    'minValNcloc',
    'minValLinesToCover',
    'minValUncoveredLines',
    'minValStatements',
    'minValCommentLinesDensity',
    'minValLineCoverage',
    'minValComplexity',
    'minValCommentLines',
    'maxValClasses',
    'maxValFunctions',
    'maxValCoverage',
    'maxValNcloc',
    'maxValLinesToCover',
    'maxValUncoveredLines',
    'maxValStatements',
    'maxValCommentLinesDensity',
    'maxValLineCoverage',
    'maxValComplexity',
    'maxValCommentLines',
    'meanValClasses',
    'meanValFunctions',
    'meanValCoverage',
    'meanValNcloc',
    'meanValLinesToCover',
    'meanValUncoveredLines',
    'meanValStatements',
    'meanValCommentLinesDensity',
    'meanValLineCoverage',
    'meanValComplexity',
    'meanValCommentLines',
    'minDiffClasses',
    'minDiffFunctions',
    'minDiffCoverage',
    'minDiffNcloc',
    'minDiffLinesToCover',
    'minDiffUncoveredLines',
    'minDiffStatements',
    'minDiffCommentLinesDensity',
    'minDiffLineCoverage',
    'minDiffComplexity',
    'minDiffCommentLines',
    'maxDiffClasses',
    'maxDiffFunctions',
    'maxDiffCoverage',
    'maxDiffNcloc',
    'maxDiffLinesToCover',
    'maxDiffUncoveredLines',
    'maxDiffStatements',
    'maxDiffCommentLinesDensity',
    'maxDiffLineCoverage',
    'maxDiffComplexity',
    'maxDiffCommentLines',
    'meanDiffClasses',
    'meanDiffFunctions',
    'meanDiffCoverage',
    'meanDiffNcloc',
    'meanDiffLinesToCover',
    'meanDiffUncoveredLines',
    'meanDiffStatements',
    'meanDiffCommentLinesDensity',
    'meanDiffLineCoverage',
    'meanDiffComplexity',
    'meanDiffCommentLines',
    'minRelDiffClasses',
    'minRelDiffFunctions',
    'minRelDiffCoverage',
    'minRelDiffNcloc',
    'minRelDiffLinesToCover',
    'minRelDiffUncoveredLines',
    'minRelDiffStatements',
    'minRelDiffCommentLinesDensity',
    'minRelDiffLineCoverage',
    'minRelDiffComplexity',
    'minRelDiffCommentLines',
    'maxRelDiffClasses',
    'maxRelDiffFunctions',
    'maxRelDiffCoverage',
    'maxRelDiffNcloc',
    'maxRelDiffLinesToCover',
    'maxRelDiffUncoveredLines',
    'maxRelDiffStatements',
    'maxRelDiffCommentLinesDensity',
    'maxRelDiffLineCoverage',
    'maxRelDiffComplexity',
    'maxRelDiffCommentLines',
    'meanRelDiffClasses',
    'meanRelDiffFunctions',
    'meanRelDiffCoverage',
    'meanRelDiffNcloc',
    'meanRelDiffLinesToCover',
    'meanRelDiffUncoveredLines',
    'meanRelDiffStatements',
    'meanRelDiffCommentLinesDensity',
    'meanRelDiffLineCoverage',
    'meanRelDiffComplexity',
    'meanRelDiffCommentLines',
    'minValSecurityReviewRating',
    'minValBugs',
    'minValGeneratedLines',
    'minValTestSuccessDensity',
    'minValMajorViolations',
    'minValReliabilityRemediationEffort',
    'minValFiles',
    'minValEffortToReachMaintainabilityRatingA',
    'minValDuplicatedLines',
    'maxValVulnerabilities',
    'maxValSecurityReviewRating',
    'maxValMajorViolations',
    'maxValMinorViolations',
    'maxValDuplicatedFiles',
    'maxValSqaleRating',
    'maxValFiles',
    'maxValOpenIssues',
    'meanValSecurityRating',
    'meanValSecurityReviewRating',
    'meanValSqaleIndex',
    'meanValSecurityHotspots',
    'meanValMajorViolations',
    'meanValFiles',
    'meanValSkippedTests',
    'meanValSecurityRemediationEffort',
    'minDiffCognitiveComplexity',
    'minDiffSecurityRating',
    'minDiffInfoViolations',
    'minDiffReopenedIssues',
    'minDiffMajorViolations',
    'minDiffViolations',
    'minDiffReliabilityRating',
    'minDiffFiles',
    'maxDiffSecurityRating',
    'maxDiffDuplicatedBlocks',
    'maxDiffBugs',
    'maxDiffLines',
    'maxDiffReopenedIssues',
    'maxDiffCriticalViolations',
    'maxDiffReliabilityRemediationEffort',
    'maxDiffFiles',
    'maxDiffWontFixIssues',
    'meanDiffDuplicatedLinesDensity',
    'meanDiffSecurityRating',
    'meanDiffReopenedIssues',
    'meanDiffTestSuccessDensity',
    'meanDiffMinorViolations',
    'meanDiffTestFailures',
    'meanDiffReliabilityRemediationEffort',
    'meanDiffCodeSmells',
    'meanDiffOpenIssues',
    'minRelDiffSecurityRating',
    'minRelDiffBlockerViolations',
    'minRelDiffGeneratedLines',
    'minRelDiffReopenedIssues',
    'minRelDiffReliabilityRemediationEffort',
    'minRelDiffSqaleRating',
    'minRelDiffSkippedTests',
    'minRelDiffDuplicatedLines',
    'minRelDiffOpenIssues',
    'maxRelDiffVulnerabilities',
    'maxRelDiffInfoViolations',
    'maxRelDiffReopenedIssues',
    'maxRelDiffConfirmedIssues',
    'maxRelDiffDuplicatedFiles',
    'maxRelDiffReliabilityRemediationEffort',
    'maxRelDiffOpenIssues',
    'meanRelDiffCognitiveComplexity',
    'meanRelDiffDuplicatedBlocks',
    'meanRelDiffSqaleIndex',
    'meanRelDiffInfoViolations',
    'meanRelDiffSecurityHotspots',
    'meanRelDiffCriticalViolations',
    'meanRelDiffReliabilityRemediationEffort',
    'meanRelDiffSqaleDebtRatio',
    'meanRelDiffSecurityRemediationEffort',
    'meanRelDiffOpenIssues',
    'maxRelDiffBugs',
    'maxRelDiffCriticalViolations',
    'meanRelDiffBugs',
    'maxRelDiffSqaleIndex',
    'maxRelDiffMajorViolations',
    'maxRelDiffViolations',
    'maxRelDiffCodeSmells',
    'meanRelDiffMajorViolations',
    'meanRelDiffViolations',
    'meanRelDiffCodeSmells',
    'maxRelDiffBlockerViolations',
    'meanRelDiffBlockerViolations',
    'maxRelDiffDuplicatedLinesDensity',
    'maxRelDiffDuplicatedBlocks',
    'maxRelDiffDuplicatedLines',
    'meanRelDiffDuplicatedLinesDensity',
    'meanRelDiffDuplicatedFiles',
    'meanRelDiffDuplicatedLines',
    'maxRelDiffSecurityHotspots',
    'maxRelDiffMinorViolations',
    'meanRelDiffMinorViolations',
    'maxRelDiffSqaleDebtRatio',
    'maxRelDiffCognitiveComplexity'
];
// Preprocessor and its config
container.bind(bugfinder_framework_1.PREPROCESSING_TYPES.preprocessor).to(bugfinder_commitpath_number_sonarqube_preprocessor_featureselection_1.NullFilterPreprocessor);
container.bind(bugfinder_commitpath_number_sonarqube_preprocessor_featureselection_1.BUGFINDER_COMMITPATH_PREDECESSORS_PREPROCESSOR_NULLFILTER_TYPES.traceAP).toConstantValue(trace);
container.bind(bugfinder_commitpath_number_sonarqube_preprocessor_featureselection_1.BUGFINDER_COMMITPATH_PREDECESSORS_PREPROCESSOR_NULLFILTER_TYPES.description).toConstantValue(description);
container.bind(bugfinder_commitpath_number_sonarqube_preprocessor_featureselection_1.BUGFINDER_COMMITPATH_PREDECESSORS_PREPROCESSOR_NULLFILTER_TYPES.ignorePaths)
    .toConstantValue(ignorePaths);
container.bind(bugfinder_framework_1.PREPROCESSING_TYPES.preprocessingFactory).to(bugfinder_framework_1.PreprocessingFactory);
// db and its config
container.bind(bugfinder_framework_1.PREPROCESSING_TYPES.db).to(bugfinder_commitpath_db_mongodb_1.CommitPathsMongoDB);
container.bind(bugfinder_commitpath_db_mongodb_1.BUGFINDER_DB_COMMITPATH_MONGODB_TYPES.mongoDBConfig).toConstantValue(mongoDBConfig);
//
container.bind(bugfinder_commitpath_number_sonarqube_preprocessor_featureselection_1.BUGFINDER_COMMITPATH_PREDECESSORS_PREPROCESSOR_NULLFILTER_TYPES.ignoreFeatures)
    .toConstantValue(ignoreFeatures);
// binding logger and its config
container.bind(bugfinder_framework_1.SHARED_TYPES.logger).to(bugfinder_framework_1.FileAndConsoleLogger);
container.bind(bugfinder_framework_1.SHARED_TYPES.logConfig).toConstantValue(logOptions);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52ZXJzaWZ5LmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2ludmVyc2lmeS5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUZBQTBHO0FBQzFHLDJEQUc2QjtBQUc3Qiw2RkFBNEU7QUFHNUUsMkpBRzZFO0FBRTdFLElBQU0sU0FBUyxHQUFHLDZEQUFzQixDQUFDO0FBdVFqQyw4QkFBUztBQXRRakIsSUFBTSxhQUFhLEdBQWtCO0lBQ2pDLEdBQUcsRUFBRSwyQkFBMkI7SUFDaEMsTUFBTSxFQUFFLGNBQWM7Q0FDekIsQ0FBQTtBQUVELElBQU0sVUFBVSxHQUFjO0lBQzFCLGNBQWMsRUFBRSxJQUFJO0lBQ3BCLGNBQWMsRUFBRSxJQUFJO0lBQ3BCLGFBQWEsRUFBRSxJQUFJO0lBQ25CLGNBQWMsRUFBRSxJQUFJO0lBQ3BCLGFBQWEsRUFBRSxJQUFJO0lBQ25CLE9BQU8sRUFBRSxXQUFXO0NBQ3ZCLENBQUE7QUFFRCxJQUFNLFdBQVcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRTVCLElBQU0sS0FBSyxHQUFZO0lBQ25CLGFBQWEsRUFBRSxnREFBZ0Q7SUFDL0QsZ0JBQWdCLEVBQUUsT0FBTztJQUN6QixpQkFBaUIsRUFBRSx3REFBd0Q7SUFDM0Usb0JBQW9CLEVBQUUsUUFBUTtJQUM5QixhQUFhLEVBQUUsdUNBQXVDO0lBQ3RELGdCQUFnQixFQUFFLFFBQVE7SUFDMUIsZ0JBQWdCLEVBQUUsK0ZBQStGO0lBQ2pILG1CQUFtQixFQUFFLE9BQU87SUFDNUIsY0FBYyxFQUFFLHVEQUF1RDtJQUN2RSxpQkFBaUIsRUFBRSxPQUFPO0NBQzdCLENBQUE7QUFDRCxJQUFNLFdBQVcsR0FBRyxnR0FBZ0c7SUFDaEgsNERBQTREO0lBQzVELCtHQUErRztJQUMvRyx3R0FBd0c7SUFDeEcsdUdBQXVHO0lBQ3ZHLGtIQUFrSDtJQUNsSCxvSEFBb0gsQ0FBQTtBQUV4SCxJQUFNLGNBQWMsR0FBRztJQUNuQixlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixhQUFhO0lBQ2Isb0JBQW9CO0lBQ3BCLHNCQUFzQjtJQUN0QixrQkFBa0I7SUFDbEIsMkJBQTJCO0lBQzNCLG9CQUFvQjtJQUNwQixrQkFBa0I7SUFDbEIsb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLGFBQWE7SUFDYixvQkFBb0I7SUFDcEIsc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQiwyQkFBMkI7SUFDM0Isb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixvQkFBb0I7SUFDcEIsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsY0FBYztJQUNkLHFCQUFxQjtJQUNyQix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLDRCQUE0QjtJQUM1QixxQkFBcUI7SUFDckIsbUJBQW1CO0lBQ25CLHFCQUFxQjtJQUNyQixnQkFBZ0I7SUFDaEIsa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixjQUFjO0lBQ2QscUJBQXFCO0lBQ3JCLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsNEJBQTRCO0lBQzVCLHFCQUFxQjtJQUNyQixtQkFBbUI7SUFDbkIscUJBQXFCO0lBQ3JCLGdCQUFnQjtJQUNoQixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGNBQWM7SUFDZCxxQkFBcUI7SUFDckIsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQiw0QkFBNEI7SUFDNUIscUJBQXFCO0lBQ3JCLG1CQUFtQjtJQUNuQixxQkFBcUI7SUFDckIsaUJBQWlCO0lBQ2pCLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLHNCQUFzQjtJQUN0Qix3QkFBd0I7SUFDeEIsb0JBQW9CO0lBQ3BCLDZCQUE2QjtJQUM3QixzQkFBc0I7SUFDdEIsb0JBQW9CO0lBQ3BCLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIscUJBQXFCO0lBQ3JCLG9CQUFvQjtJQUNwQixpQkFBaUI7SUFDakIsd0JBQXdCO0lBQ3hCLDBCQUEwQjtJQUMxQixzQkFBc0I7SUFDdEIsK0JBQStCO0lBQy9CLHdCQUF3QjtJQUN4QixzQkFBc0I7SUFDdEIsd0JBQXdCO0lBQ3hCLG1CQUFtQjtJQUNuQixxQkFBcUI7SUFDckIsb0JBQW9CO0lBQ3BCLGlCQUFpQjtJQUNqQix3QkFBd0I7SUFDeEIsMEJBQTBCO0lBQzFCLHNCQUFzQjtJQUN0QiwrQkFBK0I7SUFDL0Isd0JBQXdCO0lBQ3hCLHNCQUFzQjtJQUN0Qix3QkFBd0I7SUFDeEIsb0JBQW9CO0lBQ3BCLHNCQUFzQjtJQUN0QixxQkFBcUI7SUFDckIsa0JBQWtCO0lBQ2xCLHlCQUF5QjtJQUN6QiwyQkFBMkI7SUFDM0IsdUJBQXVCO0lBQ3ZCLGdDQUFnQztJQUNoQyx5QkFBeUI7SUFDekIsdUJBQXVCO0lBQ3ZCLHlCQUF5QjtJQUN6Qiw0QkFBNEI7SUFDNUIsWUFBWTtJQUNaLHNCQUFzQjtJQUN0QiwwQkFBMEI7SUFDMUIsdUJBQXVCO0lBQ3ZCLG9DQUFvQztJQUNwQyxhQUFhO0lBQ2IsMkNBQTJDO0lBQzNDLHVCQUF1QjtJQUN2Qix1QkFBdUI7SUFDdkIsNEJBQTRCO0lBQzVCLHVCQUF1QjtJQUN2Qix1QkFBdUI7SUFDdkIsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLHVCQUF1QjtJQUN2Qiw2QkFBNkI7SUFDN0IsbUJBQW1CO0lBQ25CLHlCQUF5QjtJQUN6Qix3QkFBd0I7SUFDeEIsY0FBYztJQUNkLHFCQUFxQjtJQUNyQixrQ0FBa0M7SUFDbEMsNEJBQTRCO0lBQzVCLHVCQUF1QjtJQUN2Qix1QkFBdUI7SUFDdkIsdUJBQXVCO0lBQ3ZCLHdCQUF3QjtJQUN4QixtQkFBbUI7SUFDbkIsMEJBQTBCO0lBQzFCLGNBQWM7SUFDZCx1QkFBdUI7SUFDdkIseUJBQXlCO0lBQ3pCLGFBQWE7SUFDYixjQUFjO0lBQ2QsdUJBQXVCO0lBQ3ZCLDJCQUEyQjtJQUMzQixxQ0FBcUM7SUFDckMsY0FBYztJQUNkLHNCQUFzQjtJQUN0QixnQ0FBZ0M7SUFDaEMsd0JBQXdCO0lBQ3hCLHdCQUF3QjtJQUN4Qiw0QkFBNEI7SUFDNUIseUJBQXlCO0lBQ3pCLHNCQUFzQjtJQUN0QixzQ0FBc0M7SUFDdEMsb0JBQW9CO0lBQ3BCLG9CQUFvQjtJQUNwQiwwQkFBMEI7SUFDMUIsNkJBQTZCO0lBQzdCLDBCQUEwQjtJQUMxQiwwQkFBMEI7SUFDMUIsd0NBQXdDO0lBQ3hDLHVCQUF1QjtJQUN2Qix3QkFBd0I7SUFDeEIsMkJBQTJCO0lBQzNCLHNCQUFzQjtJQUN0QiwyQkFBMkI7SUFDM0IsMEJBQTBCO0lBQzFCLDBCQUEwQjtJQUMxQiwyQkFBMkI7SUFDM0IsMkJBQTJCO0lBQzNCLHdDQUF3QztJQUN4QyxzQkFBc0I7SUFDdEIsZ0NBQWdDO0lBQ2hDLDZCQUE2QjtJQUM3Qix1QkFBdUI7SUFDdkIsMkJBQTJCO0lBQzNCLDZCQUE2QjtJQUM3QiwrQkFBK0I7SUFDL0IseUNBQXlDO0lBQ3pDLDJCQUEyQjtJQUMzQixzQ0FBc0M7SUFDdEMsdUJBQXVCO0lBQ3ZCLGdCQUFnQjtJQUNoQiw4QkFBOEI7SUFDOUIsaUJBQWlCO0lBQ2pCLHNCQUFzQjtJQUN0QiwyQkFBMkI7SUFDM0Isc0JBQXNCO0lBQ3RCLHNCQUFzQjtJQUN0Qiw0QkFBNEI7SUFDNUIsdUJBQXVCO0lBQ3ZCLHVCQUF1QjtJQUN2Qiw2QkFBNkI7SUFDN0IsOEJBQThCO0lBQzlCLGtDQUFrQztJQUNsQyw0QkFBNEI7SUFDNUIsMkJBQTJCO0lBQzNCLG1DQUFtQztJQUNuQyw0QkFBNEI7SUFDNUIsNEJBQTRCO0lBQzVCLDRCQUE0QjtJQUM1QiwyQkFBMkI7SUFDM0IsNEJBQTRCO0lBQzVCLDBCQUEwQjtJQUMxQiwrQkFBK0I7Q0FDbEMsQ0FBQTtBQUVELDhCQUE4QjtBQUM5QixTQUFTLENBQUMsSUFBSSxDQUNWLHlDQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyw0RkFBc0IsQ0FBQyxDQUFDO0FBQ2pFLFNBQVMsQ0FBQyxJQUFJLENBQ1YscUlBQStELENBQUMsT0FBTyxDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ25HLFNBQVMsQ0FBQyxJQUFJLENBQ1YscUlBQStELENBQUMsV0FBVyxDQUFDLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQzdHLFNBQVMsQ0FBQyxJQUFJLENBQVcscUlBQStELENBQUMsV0FBVyxDQUFDO0tBQ2hHLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUNqQyxTQUFTLENBQUMsSUFBSSxDQUNWLHlDQUFtQixDQUFDLG9CQUFvQixDQUFDLENBQUMsRUFBRSxDQUFDLDBDQUFvQixDQUFDLENBQUE7QUFFdEUsb0JBQW9CO0FBQ3BCLFNBQVMsQ0FBQyxJQUFJLENBQTJCLHlDQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxvREFBa0IsQ0FBQyxDQUFDO0FBQ3hGLFNBQVMsQ0FBQyxJQUFJLENBQWdCLHVFQUFxQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUVqSCxFQUFFO0FBQ0YsU0FBUyxDQUFDLElBQUksQ0FBVyxxSUFBK0QsQ0FBQyxjQUFjLENBQUM7S0FDbkcsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBRXBDLGdDQUFnQztBQUNoQyxTQUFTLENBQUMsSUFBSSxDQUFTLGtDQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLDBDQUFvQixDQUFDLENBQUE7QUFDcEUsU0FBUyxDQUFDLElBQUksQ0FBWSxrQ0FBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQSJ9